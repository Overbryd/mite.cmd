<pre>
                                                                
                _|            _|          _|                    
_|_|_|  _|_|          _|_|_|  _|_|_|    _|_|_|_|  _|    _|      
_|    _|    _|  _|  _|    _|  _|    _|    _|      _|    _|      
_|    _|    _|  _|  _|    _|  _|    _|    _|      _|    _|      
_|    _|    _|  _|    _|_|_|  _|    _|      _|_|    _|_|_|  _|  
                          _|                            _|      
                      _|_|                          _|_|        
                                        
                _|    _|                
_|_|_|  _|_|        _|_|_|_|    _|_|    
_|    _|    _|  _|    _|      _|_|_|_|  
_|    _|    _|  _|    _|      _|        
_|    _|    _|  _|      _|_|    _|_|_|  
</pre>
A simple command line interface for basic mite tasks.

* @mite.@ is an ingeniously sleek time tracking tool: http://mite.yo.lk
* @mighty-mite@ is a command line interface for it: http://github.com/Overbryd/mighty-mite
  It provides a system wide command called @mite@.

h3. Installation instructions:

    $ gem install overbryd-mighty-mite
    
I assume github is in your gem sources. You may need @active_support@ and @active_resource@ too.

h3. After installation instructions:

You'll need to configure the client prior using it.
To do this, you can just hammer into your console:

    $ mite configure "Your Account Name" "Your API Key"

It will then generate a yml file in ~/.mite.yml with your account information.

The configure command also tries to install the bash auto completion hook into the following files: @~/.bash_completion@, @~/.bash_profile@, @~/.bash_login@, @~/.bashrc@.

If your system doesn't support one of the files above, install the hook by yourself.
In order to work as expected it needs bash to be configured for auto completion.
This is actually quite easy, just append this line to your bash config file.

    complete -C "mite auto-complete" mite

You could use this command as an example (replace .bash_login with your bash configuration file):

    $ echo "complete -C \"mite auto-complete\" mite" >> ~/.bash_login

h3. Create new time entries with ease:

    $ mite "project name" [service_name] [start_time] [note]
    
    $ mite "project name" "service name" [note]
    
    $ mite "project name" [start_time] [note]
    
    $ mite [start_time] [note]

h4. The magic of the moment err... start_time:

Append a @+@ to the start time and it will start the tracker.

The most convenient syntax to set the start time is @h:mm@. So it will accept all these kinds of values: @1:15@, @0:01@, @24:00@.

Short-hand for hours:
* @3+@ will set the start time to 3 hours, and start the tracker
* @3.5@ will set it to 3 hours 30 minutes
* @0.25+@ will make you look like a floating-point fetish, and start the tracker

h4. Examples:

    $ mite "World Domination" "W.o.M.D" 72:01+ "This takes way too long... Maybe I should try another way."

This will set a time entry at 72:01 for the project "World Domination" with a note saying "This takes way too long... Maybe I should try another way.".
The timer will start, because of the appended '+'. If there is a running timer, it will be stopped before.

    $ mite HugEveryone 0:15 "Strange feelings..."

This will set a time entry at 0:15 for the project HugEveryone with a note saying "Strange feelings...".
The timer will not start.
    
    $ mite HugEveryone Love "Everybody should be like me..."

This will set a time entry that starts at 0:00 for the Project HugEveryone, doing the service "Love" with a note "Everybody should be like me...".
If there is a running timer, it will be stopped before.

h4. Note:

If a project or a service doesn't exist it will be created.

h3. Amazing auto-completion:

This is very nifty. (But maybe you should read the After Installation Instructions before.)
The client was designed to save keystrokes, so I've baked in a very handy auto-completion feature.

Try this:

      $ mite [tab]

It will try to auto-complete your projects.
      
      $ mite Project1 [tab]

It will try to auto-complete your services.
      
      $ mite Project1 "System Administration" [tab]

It will try to auto-complete common times!
      
      $ mite Project1 "System Administration" 0:48 [tab]

It will try to auto-complete your notes!

h4. Amazingly fast auto-completion:

The auto-completion feature creates a cache in ~/.mite.cache, if you want to rebuild this cache just hit:
    
		$ mite rebuild-cache

h4. Note: The first run without the cache might be a bit slow.

h3. Controlling timers:

		$ mite start

This little cutey will start today's last time entry, if there is one.

    $ mite stop

This will just stop the current timer. (If you like you can use `mite pause` or `mite lunch` too)

h3. Simple reports:

    $ mite today

This will generate a report of today's activity, summarizing your earnings at the bottom.

    $ mite yesterday

This will generate a report of yesterday's activity, summarizing your earnings at the bottom.
Also works using @this_week@, @last_week@, @this_month@, @last_month@ as argument.

h3. More simple stuff:

    $ mite

If there is a running timer, it will output it. Otherwise you should better not listen to it.

    $ mite +

Just create a new time entry and start tracking it.

    $ mite open

Opens your mite account in a new browser window (Max OSX only) or prints the url to your account.

h3. Feature Request? Problems? Found a bug? Your girlfriend broke up with you?

Your problems are no longer "problems"! They are called issues now, and github has the solution.

If you want to tell me an idea, I'll happily take care of them in the issues tracker: http://github.com/Overbryd/mighty-mite/issues

|\3. **All time Highscore of people who were involved** |
| who? |\2. what? |
| Sebastian Munz (yolk) | 10 issues | found a lot of bugs, did some real use testing. Really cool, thank you! |